syntax = "proto3";

package datachain.datastore.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "datachain/datastore/v1/params.proto";
import "gogoproto/gogo.proto";

option go_package = "datachain/x/datastore/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // SendChunk defines the SendChunk RPC.
  rpc SendChunk(MsgSendChunk) returns (MsgSendChunkResponse);

  // CreateStoredChunk defines the CreateStoredChunk RPC.
  rpc CreateStoredChunk(MsgCreateStoredChunk) returns (MsgCreateStoredChunkResponse);

  // UpdateStoredChunk defines the UpdateStoredChunk RPC.
  rpc UpdateStoredChunk(MsgUpdateStoredChunk) returns (MsgUpdateStoredChunkResponse);

  // DeleteStoredChunk defines the DeleteStoredChunk RPC.
  rpc DeleteStoredChunk(MsgDeleteStoredChunk) returns (MsgDeleteStoredChunkResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "datachain/x/datastore/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgSendChunk defines the MsgSendChunk message.
message MsgSendChunk {
  option (cosmos.msg.v1.signer) = "creator";
  string index = 5;
  bytes data = 6;
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string port = 2;
  string channelID = 3;
  uint64 timeoutTimestamp = 4;
}

// MsgSendChunkResponse defines the MsgSendChunkResponse message.
message MsgSendChunkResponse {}

// MsgCreateStoredChunk defines the MsgCreateStoredChunk message.
message MsgCreateStoredChunk {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string index = 2;
  bytes data = 3;
}

// MsgCreateStoredChunkResponse defines the MsgCreateStoredChunkResponse message.
message MsgCreateStoredChunkResponse {}

// MsgUpdateStoredChunk defines the MsgUpdateStoredChunk message.
message MsgUpdateStoredChunk {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string index = 2;
  bytes data = 3;
}

// MsgUpdateStoredChunkResponse defines the MsgUpdateStoredChunkResponse message.
message MsgUpdateStoredChunkResponse {}

// MsgDeleteStoredChunk defines the MsgDeleteStoredChunk message.
message MsgDeleteStoredChunk {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string index = 2;
}

// MsgDeleteStoredChunkResponse defines the MsgDeleteStoredChunkResponse message.
message MsgDeleteStoredChunkResponse {}
